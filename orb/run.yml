version: 2.1
description: Executes tasks from a private centralized repo (private orbs workaround). See https://github.com/eddiewebb/cci-shared-tasks for sample layout and more instructions.
examples:
  simple:
    description: Call a shared task by name. Using defaults the task will be pulled from https://github.com/${CIRCLE_PROJECT_USERNAME}/cci-shared-tasks/blob/master/tasks/demo-task/run.bash
    usage: 
      version: 2.1  

      orbs:
        common: eddiewebb/common_tasks@x.y.z

      workflows:
        basic:
          jobs:
            - common/common_task:
                task-name: demo-task

  with_variables:
    description: Pass additional configuration to common task
    usage: 
      version: 2.1  

      orbs:
        common: eddiewebb/common_tasks@x.y.z

      workflows:
        basic:
          jobs:
            - common/common_task:
                task-name: demo-task
                pre-steps:
                 - run: echo \"export SOME_VAR=value\" >> $BASH_ENV

  override:
    description: Override the assumed Org, Repo, Folder and Entrypoint
    usage: 
      version: 2.1  

      orbs:
        common: eddiewebb/common_tasks@x.y.z

      workflows:
        basic:
          jobs:
            - common/common_task:
                task-name: demo-task
                org_name: "ConfigOrg"
                repo_name: "shared-tasks-repo"
                task_name: "tasks_folder"
                run_name: "start.sh"


jobs:
  common_task:
    parameters:
      #must provide
      docker-image:
        type: string
        default: circleci/node:10
        description: "Specify path to docker image for executor"
      task-name:
        type: string
        description: "The task folder under your `tasks` folder"

      #override
      org-name:
        type: string
        default: "${CIRCLE_PROJECT_USERNAME}"
        description: "Alternate github org name if not same as current project's"
      repo-name:
        type: string
        default: "cci-shared-tasks"
        description: "Repository containing tasks. Structure must match guideliens for this orb (see docs)"
      run-name:
        type: string
        default: "run.bash"
        description: "Override entrypoint script"

    docker:
      - image: <<parameters.docker-image>>
    steps:
      - checkout
      - run_shared_task:
          task-name: <<parameters.task-name>>
          org-name: <<parameters.org-name>>
          repo-name: <<parameters.repo-name>>
          run-name: <<parameters.run-name>>

commands:
  run_shared_task:  
    parameters:
      #must provide
      docker-image:
        type: string
        default: circleci/node:10
        description: "Specify path to docker image for executor"
      task-name:
        type: string
        description: "The task folder under your `tasks` folder"

      #override
      org-name:
        type: string
        default: "${CIRCLE_PROJECT_USERNAME}"
        description: "Alternate github org name if not same as current project's"
      repo-name:
        type: string
        default: "cci-shared-tasks"
        description: "Repository containing tasks. Structure must match guideliens for this orb (see docs)"
      run-name:
        type: string
        default: "run.bash"
        description: "Override entrypoint script"
    steps:
      - add_ssh_keys
      - run:
          name: Keyscan Github (HACK)
          command: ssh-keyscan -H github.com >> ~/.ssh/known_hosts

      - run: 
          name: Execute common task:<<parameters.task-name>> from <<parameters.repo-name>>
          command: |
            #!/bin/bash

            # replaces current repo name with task repo name
            TASK_REPO_URL=${CIRCLE_REPOSITORY_URL/$CIRCLE_PROJECT_REPONAME/<<parameters.repo-name>>}
            # replace orgname with parameter (most cases will be the same)
            TASK_REPO_URL=${TASK_REPO_URL/$CIRCLE_PROJECT_USERNAME/<<parameters.org-name>>}

            echo "Attempting to pull common task from: $TASK_REPO_URL"

            mkdir /tmp/<<parameters.repo-name>>
            cd /tmp/<<parameters.repo-name>>
            git init -q > /dev/null
            git remote add origin ${TASK_REPO_URL} > /dev/null
            git fetch -q origin > /dev/null
            git checkout -q origin/master -- tasks/<<parameters.task-name>> > /dev/null
            

            cd - > /dev/null
            bash /tmp/<<parameters.repo-name>>/tasks/<<parameters.task-name>>/<<parameters.run-name>>
